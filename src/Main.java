public class Main {



    public static void main(String[] args) {
        //ПЕРЕМЕННЫЕ В JAVA.
////////////////////////////////////////////////////////////////////////////////////////
                //Целочисленные переменные.
                //=========================
        //1// byte
               // -----
                //от -128 до 127 (объём памяти 1 байт)

        //2// short
                //-----
                //от -32768 до 32767 (2 байта)

        //3// int
                //---
                //-2147483648 до 2147483647 (4 байта)

        //4// long
                //----
                //-9223372036854775808 до 9223372036854775807 (8 байт)

        //С плавающей точкой.
                //===================
        //5// float
                //-----
                //от -3.4+38 до 3.4E+38 (4 байта),
        //а правильно будет -3.4E38 до 3.4Е38 (!правильная запись в шестнацатиричной системе(4 байт))
        //от -3.3055419921875  до 3.3055419921875 (4 байт)

        //6// double
                //------
        //от -1.7E+308 до 1.7E+308 (8 байт),
        //а правильно будет -1.7E308 до 1.7E308 (!правильная запись в шестнадцатиричной системе(8 байт))
        //oт  -1.49292755126953 до 1.49292755126953 (8байт)

        //Символы.
                //========
        //7// сhar
                //----
        //Переменные типа char - все символы на планете Земля(иероглифы,буквы,математические и иные знаки и т.п. и т.д.)
        //от 0 до 65536 (2 байта)

        //Логические.
                //===========
        //8// boolean
               // -------
                //Может содержать либо true либо false
        //(1бит информации: либо 1(заряженная конденсаторная ячейка),либо 0(разряженная конденсаторная ячейка))

        //Справка
                //+++++++
                //1 байт = 8 бит
        //Ячейка памяти для переменной типа boolean имеет размер 1bit,а ячейки памяти переменных типа
        ///byte,short,int,long,float,double,char.
                //Команда String.format("%.2f",total)//смотрим ниже// позволяет округлить дробное значение,
        //увеличив,тем самым размер целочисленной части дроби.

        //double salary = 65535;
        //double total = 0;
        //for ( int i = 1 ; i <= 12 ; i = i + 1) {
            //total = total + total/100;
            //total = total + salary;
            //String result = String.format("%.2f",total);
            //System.out.println("Зарплата программиста за месяц " + i + " " + "к выплате " +  result + " " +
                    //"рублей.");}

        //Вывод:Чаще всего мы будем работать с переменными типа int,double.
                //Переменную типа boolean будем использовать реже,переменную типа
        //boolean можно заменить перменной типа int,присвоив ей значение 1 или 0.
        //Переменную типа boolean используем,только тогда,когда наши коллеги
        //вместо значения 1 или 0 пытаются записать(по запарке) другие значения.
        //Поэтому переменную boolean желательно использовать во избежание недоразумений.

        System.out.println("================================================================================");
        System.out.println("================================================================================");
        System.out.println("================================================================================");
        System.out.println("================================================================================");
        System.out.println("================================================================================");
        System.out.println("================================================================================");
        char c = '+';
        char d = '/';
        char e = '*';
        char f = '-';
        System.out.println(c + " != " + d + " != " + e + " != " + f);
        char red = 'r';
        char yellow = 'y';
        char green = 'g';
        if (red == 'r') {
            System.out.println("Красный! Ехать нельзя!");
        } else {
            if (yellow == 'y') {
                System.out.println("Желтый. Внимание.");}
            else {
                if (green == 'g') {
                System.out.println("Зеленый! Проезд разрешен.");
            }
        }
        }
        //Или можно тот же код можно переписать:
        char redX = 'a';
        char yellowX = 'b';
        char greenX = 'g';
        if (redX == 'r') {
            System.out.println("Красный! Ехать нельзя!");
        } else {
            if (yellowX == 'y') {
                System.out.println("Желтый. Внимание.");}
            else {
                    System.out.println("Зеленый! Проезд разрешен.");
                }

        }
        //Оба кода работают!Но каждый по своему алгоритму.
        System.out.println("/////////////////////////////////////////////////////////////////////////////////");
        //Конструкция switch:
        int dayOfWeekNumber = 3;

        switch (dayOfWeekNumber) {
            case 1:
                System.out.println("Понедельник");
                break;
            case 2:
                System.out.println("Вторник");
                break;
            case 3:
                System.out.println("Среда");
                break;
            case 4:
                System.out.println("Четверг");
                break;
            case 5:
                System.out.println("Пятница");
                break;
            case 6:
                System.out.println("Суббота");
                break;
            case 7:
                System.out.println("Воскресенье");
                break;
            default:
                System.out.println("Такого дня не существует");
        }
        System.out.println("///////////////////////////////////////////////////////////////////////////////////");
        int dayOfWeekNumberX = 3;

        switch (dayOfWeekNumberX) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                System.out.println("Будний день");
                break;
            case 6:
            case 7:
                System.out.println("Выходной день");
                break;
            default:
                System.out.println("Такого дня не существует");
        }
        System.out.println("///////////////////////////////////////////////////////////////////////////////");
        //Нужно знать
        //Код группируется в фигурные скобки {}.
        //Участок кода, сгруппированный в такие скобки, называется блоком кода.
        //Все переменные, объявленные внутри блока, не видны за его пределами.
        //Это называется областью видимости переменных.
        //Конструкции if-else if-else достаточно гибкие и позволяют строить условные конструкции разными способами.
        //Правила следующие.
        //Блок if должен быть обязательно.
        //Блок else if не является обязательным, но может быть представлен в любом количестве при разных
        // условиях, которые записаны в круглых скобках, но крайне не рекомендуется использовать больше
        // одного. В такой ситуации, если весь диапазон значений известен заранее, лучше использовать switch.
        //Блок else не обязателен, но если присутствует, то только в единственном экземпляре.
        //Выражения в блоке условий могут быть представлены в виде нескольких сравнений одновременно.
        //Для этого используются логические операторы И (&&) и ИЛИ (||).
        //Работают они следующим образом.
        //Допустим, нам нужно определить, является погода комфортной или нет. За комфортную погоду берем температуру воздуха больше или равно 20 И температуру меньше или равно 25, т. е. от 20 до 25. Если наше значение попадает в этот диапазон, вывести сообщение о том, что погода комфортна для прогулок, иначе вывести предупреждение.

        int temperature = 21;
        if (temperature >= 20 && temperature <= 25) {
            System.out.println("Погода комфортна для прогулок");
        } else {
            System.out.println("Стоит повременить с прогулкой");
        }
        //Читаем как:
        //"ЕСЛИ температура больше или равна 20 И температура меньше или равна 25, ТО вывести сообщение о
        // комфортных условиях,
        //ИНАЧЕ вывести сообщение с предупреждением".
        //В этом коде имеются два условия, которые скомбинированы через оператор И.
        //Если хотя бы одно из двух вернет false, выражение не будет выполнено.
        //Оператор И (&&) подразумевает, что оба условия должны быть true.
        //Развернем условие задачи. Теперь нам нужно вывести предупреждение, если температура ниже 20 ИЛИ температура выше 25.

        int temperatureX = 19;
        if (temperatureX < 20 || temperatureX > 25) {
            System.out.println("Стоит повременить с прогулкой");
        }
        //Читаем как:
        //"ЕСЛИ температура меньше 20 ИЛИ температура больше 25,
        //ТО вывести предупреждение".
        //В этом коде имеются два условия, которые скомбинированы через оператор ИЛИ.
        //Если хотя бы одно из двух будет true, блок выполнится и в консоль будет выведено сообщение с предупреждением.
        //Интересный факт
        //Логические операторы И (&&) и ИЛИ (||) оптимизированы и не будут осуществлять вычисление второго
        // условия, если его результат не повлияет на общий результат. Например:
        //И (&&)
        // true && true будет равно true, выполняются оба сравнения.
        //true && false будет равно false, выполнятся оба сравнения.
        //false && true будет равно false, выполняется первое сравнение, получаем false, второе высчитывать
        // не имеет смысла, оно не повлияет на результат.
        //false && false также будет равно false, выполнение второго сравнения не имеет смысла.
        //ИЛИ (||)
        //true || true будет равно true, вычислять второе сравнение не имеет смысла, так как первое уже
        // позволяет получить общий результат true.
        //true || false будет равно true, вычислять второе сравнение не имеет смысла.
        //false || true будет равно true, выполняются оба сравнения, так как второе напрямую влияет на
        // результат.
        //false || false будет равно false, выполняются оба сравнения, так как второе может повлиять на
        // результат (но не влияет).
        System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
        System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
        System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
        System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
        System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
        //Итак,Нужно знать!!!!!
        //1.Код группируется в фигурные скобки {}.Содержимое скобок{} - блок код - область видимости переменных.
        //2.Конструкции if-else if-else достаточно гибкие и позволяют строить условные конструкции разными
        // способами.
        //Правила следующие.
        //Блок if должен быть обязательно.
        //Блок else if не является обязательным, но может быть представлен в любом количестве при разных
        // условиях, которые записаны в круглых скобках, но крайне не рекомендуется использовать больше одного.
        // В такой ситуации, если весь диапазон значений известен заранее, лучше использовать switch.
        //Блок else не обязателен, но если присутствует, то только в единственном экземпляре.
        //3.Выражения в блоке условий могут быть представлены в виде нескольких сравнений одновременно.
        //Для этого используются логические операторы И (&&) и ИЛИ (||).
        //4.И (&&)
        //true && true будет равно true, выполняются оба сравнения.
        //true && false будет равно false, выполнятся оба сравнения.
        //false && true будет равно false, выполняется первое сравнение, получаем false, второе высчитывать не
        // имеет смысла, оно не повлияет на результат.
        //false && false также будет равно false, выполнение второго сравнения не имеет смысла.
        //При использовании двойного имперсанта "&&" доминирует false!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        //5.ИЛИ (||)
        //true || true будет равно true, вычислять второе сравнение не имеет смысла, так как первое уже
        // позволяет получить общий результат true.
        //true || false будет равно true, вычислять второе сравнение не имеет смысла.
        //false || true будет равно true, выполняются оба сравнения, так как второе напрямую влияет на
        // результат.
        //false || false будет равно false, выполняются оба сравнения, так как второе может повлиять на
        // результат (но не влияет).
        //При использовании в конструкции или "||" доминирует true!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!




































































































        System.out.println("Hello Russia!Hello China!Hello world!");
    }
}